<?php

/**
 * Created by IntelliJ IDEA.
 * User: maxsky
 * Date: 2022/5/16
 * Time: 16:04
 */

namespace Tests;

use Exception;
use PHPUnit\Framework\TestCase;
use UMeng\Services\Push\Android\AndroidBroadcast;
use UMeng\Services\Push\Android\AndroidCustomizedCast;
use UMeng\Services\Push\Android\AndroidFileCast;
use UMeng\Services\Push\Android\AndroidGroupCast;
use UMeng\Services\Push\Android\AndroidUniCast;
use UMeng\Services\Push\iOS\IOSBroadcast;
use UMeng\Services\Push\iOS\IOSCustomizedCast;
use UMeng\Services\Push\iOS\IOSFileCast;
use UMeng\Services\Push\iOS\IOSGroupCast;
use UMeng\Services\Push\iOS\IOSUniCast;
use UMeng\Utils\UMengServiceException;

class TestPush extends TestCase {

    protected $appkey = 'test';
    protected $appMasterSecret = 'test';
    protected $timestamp;
    protected $validation_token;

    protected function setUp(): void {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->timestamp = strval(time());
    }

    public function testSendAndroidBroadcast() {
        try {
            $broadcast = new AndroidBroadcast();

            $broadcast->setAppMasterSecret($this->appMasterSecret);
            $broadcast->setPredefinedKeyValue('appkey', $this->appkey);
            $broadcast->setPredefinedKeyValue('timestamp', $this->timestamp);
            $broadcast->setPredefinedKeyValue('ticker', 'Android broadcast ticker');
            $broadcast->setPredefinedKeyValue('title', '中文的 title');
            $broadcast->setPredefinedKeyValue('text', 'Android broadcast text');
            $broadcast->setPredefinedKeyValue('after_open', 'go_app');

            // Set 'production_mode' to 'false' if it's a test device.
            // For how to register a test device, please see the developer doc.
            $broadcast->setPredefinedKeyValue('production_mode', 'true');

            // [optional] Set extra fields
            $broadcast->setExtraField('test', 'helloworld');

            $result = $broadcast->send();

            $this->assertTrue($result['ret'] === 'SUCCESS');
        } catch (UMengServiceException $e) {
            print('Caught exception: ' . $e->getMessage());
        }
    }

    public function testSendAndroidUniCast() {
        try {
            $unicast = new AndroidUniCast();

            $unicast->setAppMasterSecret($this->appMasterSecret);
            $unicast->setPredefinedKeyValue('appkey', $this->appkey);
            $unicast->setPredefinedKeyValue('timestamp', $this->timestamp);

            // Set your device tokens here
            $unicast->setPredefinedKeyValue('device_tokens', 'xx');
            $unicast->setPredefinedKeyValue('ticker', 'Android unicast ticker');
            $unicast->setPredefinedKeyValue('title', 'Android unicast title');
            $unicast->setPredefinedKeyValue('text', 'Android unicast text');
            $unicast->setPredefinedKeyValue('after_open', 'go_app');

            // Set 'production_mode' to 'false' if it's a test device.
            // For how to register a test device, please see the developer doc.
            $unicast->setPredefinedKeyValue('production_mode', 'true');

            // Set extra fields
            $unicast->setExtraField('test', 'helloworld');

            $result = $unicast->send();

            $this->assertTrue($result['ret'] === 'SUCCESS');
        } catch (Exception $e) {
            print('Caught exception: ' . $e->getMessage());
        }
    }

    public function testSendAndroidFileCast() {
        try {
            $fileCast = new AndroidFileCast();

            $fileCast->setAppMasterSecret($this->appMasterSecret);
            $fileCast->setPredefinedKeyValue('appkey', $this->appkey);
            $fileCast->setPredefinedKeyValue('timestamp', $this->timestamp);
            $fileCast->setPredefinedKeyValue('ticker', 'Android filecast ticker');
            $fileCast->setPredefinedKeyValue('title', 'Android filecast title');
            $fileCast->setPredefinedKeyValue('text', 'Android filecast text');
            $fileCast->setPredefinedKeyValue('after_open', 'go_app');  //go to app

            print("Uploading file contents, please wait...\r\n");

            // Upload your device tokens, and use '\n' to split them if there are multiple tokens
            $fileCast->uploadContents('aa' . "\n" . 'bb');

            print("Sending filecast notification, please wait...\r\n");

            $result = $fileCast->send();

            $this->assertTrue($result['ret'] === 'SUCCESS');
        } catch (Exception $e) {
            print('Caught exception: ' . $e->getMessage());
        }
    }

    public function testSendAndroidGroupCast() {
        try {
            /*
              *  Construct the filter condition:
              *  'where':
              *	{
              *		'and':
              *		[
                *			{'tag':'test'},
                *			{'tag':'Test'}
              *		]
              *	}
              */
            $filter = [
                'where' => [
                    'and' => [
                        [
                            'tag' => 'test'
                        ],
                        [
                            'tag' => 'Test'
                        ]
                    ]
                ]
            ];

            $groupCast = new AndroidGroupCast();

            $groupCast->setAppMasterSecret($this->appMasterSecret);
            $groupCast->setPredefinedKeyValue('appkey', $this->appkey);
            $groupCast->setPredefinedKeyValue('timestamp', $this->timestamp);

            // Set the filter condition
            $groupCast->setPredefinedKeyValue('filter', $filter);
            $groupCast->setPredefinedKeyValue('ticker', 'Android groupcast ticker');
            $groupCast->setPredefinedKeyValue('title', 'Android groupcast title');
            $groupCast->setPredefinedKeyValue('text', 'Android groupcast text');
            $groupCast->setPredefinedKeyValue('after_open', 'go_app');

            // Set 'production_mode' to 'false' if it's a test device.
            // For how to register a test device, please see the developer doc.
            $groupCast->setPredefinedKeyValue('production_mode', 'true');

            print("Sending groupcast notification, please wait...\r\n");

            $result = $groupCast->send();

            $this->assertTrue($result['ret'] === 'SUCCESS');
        } catch (Exception $e) {
            print('Caught exception: ' . $e->getMessage());
        }
    }

    public function testSendAndroidCustomizedCast() {
        try {
            $customizedCast = new AndroidCustomizedCast();

            $customizedCast->setAppMasterSecret($this->appMasterSecret);
            $customizedCast->setPredefinedKeyValue('appkey', $this->appkey);
            $customizedCast->setPredefinedKeyValue('timestamp', $this->timestamp);

            // Set your alias here, and use comma to split them if there are multiple alias.
            // And if you have many alias, you can also upload a file containing these alias, then
            // use file_id to send customized notification.
            $customizedCast->setPredefinedKeyValue('alias', 'xx');

            // Set your alias_type here
            $customizedCast->setPredefinedKeyValue('alias_type', 'xx');
            $customizedCast->setPredefinedKeyValue('ticker', 'Android customizedcast ticker');
            $customizedCast->setPredefinedKeyValue('title', 'Android customizedcast title');
            $customizedCast->setPredefinedKeyValue('text', 'Android customizedcast text');
            $customizedCast->setPredefinedKeyValue('after_open', 'go_app');

            print("Sending customizedcast notification, please wait...\r\n");

            $result = $customizedCast->send();

            $this->assertTrue($result['ret'] === 'SUCCESS');
        } catch (Exception $e) {
            print('Caught exception: ' . $e->getMessage());
        }
    }

    public function testSendAndroidCustomizedCastFileId() {
        try {
            $customizedCast = new AndroidCustomizedCast();
            $customizedCast->setAppMasterSecret($this->appMasterSecret);
            $customizedCast->setPredefinedKeyValue('appkey', $this->appkey);
            $customizedCast->setPredefinedKeyValue('timestamp', $this->timestamp);

            // if you have many alias, you can also upload a file containing these alias, then
            // use file_id to send customized notification.
            $customizedCast->uploadContents('aa' . "\n" . 'bb');

            // Set your alias_type here
            $customizedCast->setPredefinedKeyValue('alias_type', 'xx');
            $customizedCast->setPredefinedKeyValue('ticker', 'Android customizedcast ticker');
            $customizedCast->setPredefinedKeyValue('title', 'Android customizedcast title');
            $customizedCast->setPredefinedKeyValue('text', 'Android customizedcast text');
            $customizedCast->setPredefinedKeyValue('after_open', 'go_app');

            print("Sending customizedcast notification, please wait...\r\n");

            $result = $customizedCast->send();

            $this->assertTrue($result['ret'] === 'SUCCESS');
        } catch (Exception $e) {
            print('Caught exception: ' . $e->getMessage());
        }
    }

    public function testSendIOSBroadcast() {
        try {
            $broadcast = new IOSBroadcast();

            $broadcast->setAppMasterSecret($this->appMasterSecret);
            $broadcast->setPredefinedKeyValue('appkey', $this->appkey);
            $broadcast->setPredefinedKeyValue('timestamp', $this->timestamp);

            $broadcast->setPredefinedKeyValue('alert', 'IOS 广播测试');
            $broadcast->setPredefinedKeyValue('badge', 0);
            $broadcast->setPredefinedKeyValue('sound', 'chime');

            // Set 'production_mode' to 'true' if your app is under production mode
            $broadcast->setPredefinedKeyValue('production_mode', 'false');

            // Set customized fields
            $broadcast->setCustomizedField('test', 'helloworld');

            print("Sending broadcast notification, please wait...\r\n");

            $result = $broadcast->send();

            $this->assertTrue($result['ret'] === 'SUCCESS');
        } catch (Exception $e) {
            print('Caught exception: ' . $e->getMessage());
        }
    }

    public function testSendIOSUniCast() {
        try {
            $unicast = new IOSUniCast();

            $unicast->setAppMasterSecret($this->appMasterSecret);
            $unicast->setPredefinedKeyValue('appkey', $this->appkey);
            $unicast->setPredefinedKeyValue('timestamp', $this->timestamp);

            // Set your device tokens here
            $unicast->setPredefinedKeyValue('device_tokens', 'xx');
            $unicast->setPredefinedKeyValue('alert', 'IOS 单播测试');
            $unicast->setPredefinedKeyValue('badge', 0);
            $unicast->setPredefinedKeyValue('sound', 'chime');

            // Set 'production_mode' to 'true' if your app is under production mode
            $unicast->setPredefinedKeyValue('production_mode', 'false');

            // Set customized fields
            $unicast->setCustomizedField('test', 'helloworld');

            print("Sending unicast notification, please wait...\r\n");

            $result = $unicast->send();

            $this->assertTrue($result['ret'] === 'SUCCESS');
        } catch (Exception $e) {
            print('Caught exception: ' . $e->getMessage());
        }
    }

    public function testSendIOSFileCast() {
        try {
            $fileCast = new IOSFileCast();

            $fileCast->setAppMasterSecret($this->appMasterSecret);
            $fileCast->setPredefinedKeyValue('appkey', $this->appkey);
            $fileCast->setPredefinedKeyValue('timestamp', $this->timestamp);

            $fileCast->setPredefinedKeyValue('alert', 'IOS 文件播测试');
            $fileCast->setPredefinedKeyValue('badge', 0);
            $fileCast->setPredefinedKeyValue('sound', 'chime');

            // Set 'production_mode' to 'true' if your app is under production mode
            $fileCast->setPredefinedKeyValue('production_mode', 'false');

            print("Uploading file contents, please wait...\r\n");

            // Upload your device tokens, and use '\n' to split them if there are multiple tokens
            $fileCast->uploadContents('aa' . "\n" . 'bb');

            print("Sending filecast notification, please wait...\r\n");

            $result = $fileCast->send();

            $this->assertTrue($result['ret'] === 'SUCCESS');
        } catch (Exception $e) {
            print('Caught exception: ' . $e->getMessage());
        }
    }

    public function testSendIOSGroupCast() {
        try {
            /*
              *  Construct the filter condition:
              *  'where':
              *	{
              *		'and':
              *		[
                *			{'tag':'iostest'}
              *		]
              *	}
              */
            $filter = [
                'where' => [
                    'and' => [
                        [
                            'tag' => 'iostest'
                        ]
                    ]
                ]
            ];

            $groupCast = new IOSGroupCast();

            $groupCast->setAppMasterSecret($this->appMasterSecret);
            $groupCast->setPredefinedKeyValue('appkey', $this->appkey);
            $groupCast->setPredefinedKeyValue('timestamp', $this->timestamp);

            // Set the filter condition
            $groupCast->setPredefinedKeyValue('filter', $filter);
            $groupCast->setPredefinedKeyValue('alert', 'IOS 组播测试');
            $groupCast->setPredefinedKeyValue('badge', 0);
            $groupCast->setPredefinedKeyValue('sound', 'chime');

            // Set 'production_mode' to 'true' if your app is under production mode
            $groupCast->setPredefinedKeyValue('production_mode', 'false');

            print("Sending groupcast notification, please wait...\r\n");

            $result = $groupCast->send();

            $this->assertTrue($result['ret'] === 'SUCCESS');
        } catch (Exception $e) {
            print('Caught exception: ' . $e->getMessage());
        }
    }

    public function testSendIOSCustomizedCast() {
        try {
            $customizedCast = new IOSCustomizedCast();

            $customizedCast->setAppMasterSecret($this->appMasterSecret);
            $customizedCast->setPredefinedKeyValue('appkey', $this->appkey);
            $customizedCast->setPredefinedKeyValue('timestamp', $this->timestamp);

            // Set your alias here, and use comma to split them if there are multiple alias.
            // And if you have many alias, you can also upload a file containing these alias, then
            // use file_id to send customized notification.
            $customizedCast->setPredefinedKeyValue('alias', 'xx');

            // Set your alias_type here
            $customizedCast->setPredefinedKeyValue('alias_type', 'xx');
            $customizedCast->setPredefinedKeyValue('alert', 'IOS 个性化测试');
            $customizedCast->setPredefinedKeyValue('badge', 0);
            $customizedCast->setPredefinedKeyValue('sound', 'chime');

            // Set 'production_mode' to 'true' if your app is under production mode
            $customizedCast->setPredefinedKeyValue('production_mode', 'false');

            print("Sending customizedcast notification, please wait...\r\n");

            $result = $customizedCast->send();

            $this->assertTrue($result['ret'] === 'SUCCESS');
        } catch (Exception $e) {
            print('Caught exception: ' . $e->getMessage());
        }
    }
}
